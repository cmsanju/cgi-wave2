Step 1 
nmp install @angular/cli -g

Step 2 create new project

ng new angular-httpclient-app

step 3 

cd angular-httpclient-app

step 4 

npm install bootstrap

step 5 update angular.json file

"styles":[
	"node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
]

step 6 create the components

ng g c employee-create
ng g c employee-edit
ng g c employee-list

step 7 configure json server

npm install -g json-server

step 8 create and update db.json file inside the server folder

{
  "employees": [
    {
      "id": 1,
      "name": "Sanjeev",
      "email": "java@java.com",
      "phone": "94929292929"
    },
    {
      "id": 2,
      "name": "Black Widow",
      "email": "black-widow@mcu.com",
      "phone": "001-123-4568"
    },
    {
      "name": "Sanju",
      "email": "sana@sana.com",
      "phone": "94927488448",
      "id": 5
    },
    {
      "name": "Manohar",
      "email": "manohar@cgi.com",
      "phone": "8980989098",
      "id": 6
    }
  ]
}

server.ts file

const jsonServer = require('json-server');
const server = jsonServer.create();
const router = jsonServer.router('server/db.json');
const middlewares = jsonServer.defaults();
const db = require('./db.json');
const fs = require('fs');

server.use(middlewares);
server.use(jsonServer.bodyParser);

server.post('/login', (req, res, next) => { 
  const users = readUsers();

  const user = users.filter(
    u => u.username === req.body.username && u.password === req.body.password
  )[0];

  if (user) {
    res.send({ ...formatUser(user), token: checkIfAdmin(user) });
  } else {
    res.status(401).send('Incorrect username or password');
  }
});

server.post('/register', (req, res) => {
  const users = readUsers();
  const user = users.filter(u => u.username === req.body.username)[0];

  if (user === undefined || user === null) {
    res.send({
      ...formatUser(req.body),
      token: checkIfAdmin(req.body)
    });
    db.users.push(req.body);
  } else {
    res.status(500).send('User already exists');
  }
});

server.use('/users', (req, res, next) => {
  if (isAuthorized(req) || req.query.bypassAuth === 'true') {
    next();
  } else {
    res.sendStatus(401);
  }
});

server.use(router);
server.listen(3000, () => {
  console.log('JSON Server is running');
});

function formatUser(user) {
  delete user.password;
  user.role = user.username === 'admin'
    ? 'admin'
    : 'user';
  return user;
}

function checkIfAdmin(user, bypassToken = false) {
  return user.username === 'admin' || bypassToken === true
    ? 'admin-token'
    : 'user-token';
}

function isAuthorized(req) {
  return req.headers.authorization === 'admin-token' ? true : false;
}

function readUsers() {
  const dbRaw = fs.readFileSync('./server/db.json');  
  const users = JSON.parse(dbRaw).users
  return users;
}

step 9 start json server
json-server --watch db.json

npm run server  //localhost:3000

Step 10 update routing.module.ts file

step 11 update app.module.ts

step 12 create class / interface 

step 13 create the rest api service

creating the employee data
update the html
update the ts file

like this all the modules

step 14 update package.json file

"server": "ts-node ./server/server.ts"

select * from employee where id = 1; listing the data

delete from employee where id = 1;

step 15 for starting json server

npm run server 
